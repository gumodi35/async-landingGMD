1.
¿El método then() retorna?
Promesa
2.
¿Para qué nos sirve la clase XMLHttpRequest?
Nos permite realizar solicitudes HTTP de una forma muy fácil.
3.
¿Cuál es el método recomendado por la comunidad para manejar asincronismo en JavaScript?
Async/await
4.
Palabra que nos permite definir una función así­ncrona. Selecciona la opción correcta:
async
5.
¿Cuáles son los argumentos que recibe una promesa?
resolve, reject
6.
¿Para qué nos sirve el método "catch()"?
Muestra el error en json de una promesa rechazada.
REPASAR CLASE
7.
¿Para qué utilizamos JSON.parse(xhttp.responseText)?
Convertir una respuesta de texto en un Arreglo inmutable.
REPASAR CLASE
8.
¿Cuál es la forma correcta de retornar un Error en reject?
reject (new Error(Error))

9.
¿Nos permite ejecutar una serie de promesas secuencialmente?
Promise.all()

10.
¿Para qué nos sirve xhttp.status === 200?
Verificamos que el estatus de la petición HTTP resuelva el estado 200.
11.
¿Cuál es la expresión que pausa la ejecución de la función así­ncrona y espera la resolución de la promise?
await
12.
Es el problema de anidamiento de callbacks, que las promesas resuelven. Selecciona la respuesta correcta.

callback hell
13.
¿Cómo aseguramos manejar los errores asincrónicos correctamente?
try { ...código } catch (error) { ...código }

14.
Una función callback es:

Una función que se pasa a otra función como un argumento, invocada dentro de la función externa.
